[{"/Users/jeahyenjung/Desktop/toy/gridprac/src/App.js":"1","/Users/jeahyenjung/Desktop/toy/gridprac/src/index.js":"2","/Users/jeahyenjung/Desktop/toy/gridprac/src/component/header/Header.js":"3","/Users/jeahyenjung/Desktop/toy/gridprac/src/pages/Contents.js":"4","/Users/jeahyenjung/Desktop/toy/gridprac/src/pages/ContentDetail.js":"5","/Users/jeahyenjung/Desktop/toy/gridprac/src/pages/ContentsList.js":"6","/Users/jeahyenjung/Desktop/toy/gridprac/src/lib/api/api.js":"7","/Users/jeahyenjung/Desktop/toy/gridprac/src/component/card/Card.js":"8","/Users/jeahyenjung/Desktop/toy/gridprac/src/pages/ContentMaker.js":"9"},{"size":581,"mtime":1608826549667,"results":"10","hashOfConfig":"11"},{"size":215,"mtime":1608734638123,"results":"12","hashOfConfig":"11"},{"size":448,"mtime":1608830069954,"results":"13","hashOfConfig":"11"},{"size":545,"mtime":1608830164480,"results":"14","hashOfConfig":"11"},{"size":2499,"mtime":1608824776915,"results":"15","hashOfConfig":"11"},{"size":1723,"mtime":1608897004849,"results":"16","hashOfConfig":"11"},{"size":1053,"mtime":1608896296932,"results":"17","hashOfConfig":"11"},{"size":639,"mtime":1608896429646,"results":"18","hashOfConfig":"11"},{"size":2214,"mtime":1608829484396,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"421s0b",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"/Users/jeahyenjung/Desktop/toy/gridprac/src/App.js",[],"/Users/jeahyenjung/Desktop/toy/gridprac/src/index.js",[],["42","43"],"/Users/jeahyenjung/Desktop/toy/gridprac/src/component/header/Header.js",[],"/Users/jeahyenjung/Desktop/toy/gridprac/src/pages/Contents.js",["44"],"/Users/jeahyenjung/Desktop/toy/gridprac/src/pages/ContentDetail.js",["45"],"import React, { useState } from 'react'\nimport api from '../lib/api/api'\nimport './ContentDetail.scss'\n\nfunction ContentDetail({ match }) {\n  const [play, setPlay] = useState(false)\n  const [id, setId] = useState(null)\n  const [time, setTime] = useState(null)\n  const url = play\n    ? `https://www.youtube.com/embed/${id}?autoplay=1;start=${time}`\n    : `https://www.youtube.com/embed/${id}`\n\n  const [testData, setTestData] = useState({\n    status: 'idle',\n    test: null,\n  })\n\n  useState(() => {\n    ;(async () => {\n      try {\n        const result = await api.getTestApi(match.params.id)\n        setTestData({\n          status: 'pending',\n          test: null,\n        })\n        setTestData({\n          status: 'resolved',\n          test: result,\n        })\n      } catch (e) {\n        setTestData({\n          status: 'rejected',\n          test: null,\n        })\n      }\n    })()\n  }, [match.params.id])\n\n  switch (testData.status) {\n    case 'idle':\n      return <>idle</>\n    case 'pending':\n      return <>pending</>\n    case 'rejected':\n      return <>404</>\n    case 'resolved':\n    default:\n      return (\n        <div className=\"detailWrapper\">\n          <div className=\"contentWrapper\">\n            <span className=\"title\">{testData.test.title}</span>\n            <div className=\"iframeWrapper\">\n              <iframe\n                className=\"rsvideo\"\n                width=\"560\"\n                height=\"315\"\n                src={url}\n                frameborder=\"0\"\n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                allowfullscreen\n              ></iframe>\n              <div className=\"buttonBox\">\n                <button\n                  onClick={() => {\n                    setTime(testData.test.start)\n                    setId(testData.test.contentUrl.slice(-11))\n                    setPlay(true)\n                    setTimeout(() => setPlay(false), 2500)\n                  }}\n                >\n                  1 초\n                </button>\n                <button\n                  onClick={() => {\n                    setTime(testData.test.start)\n                    setId(testData.test.contentUrl.slice(-11))\n                    setPlay(true)\n                    setTimeout(() => setPlay(false), 4500)\n                  }}\n                >\n                  3 초\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n  }\n}\n\nexport default ContentDetail\n","/Users/jeahyenjung/Desktop/toy/gridprac/src/pages/ContentsList.js",["46"],"import React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Card from '../component/card/Card'\nimport api from '../lib/api/api'\nimport './ContentsList.scss'\n\nfunction ContentsList() {\n  const history = useHistory()\n  const [contents, setContents] = useState({\n    status: 'idle',\n    tests: null,\n  })\n\n  useEffect(() => {\n    ;(async () => {\n      try {\n        const result = await api.getTestsApi()\n\n        setContents({\n          status: 'pending',\n          tests: null,\n        })\n\n        setContents({\n          status: 'resolved',\n          tests: result,\n        })\n      } catch (e) {\n        setContents({\n          status: 'rejected',\n          tests: null,\n        })\n      }\n    })()\n  }, [])\n\n  const onDelete = async id => {\n    try {\n      const result = await api.deleteTest(id)\n      setContents({\n        status: 'resolved',\n        tests: contents.tests.filter(item => {\n          return item.id !== id\n        }),\n      })\n    } catch (e) {}\n  }\n\n  switch (contents.status) {\n    case 'idle':\n      return <>idle</>\n    case 'pending':\n      return <>loading,,,,</>\n    case 'rejected':\n      return <>404</>\n    case 'resolved':\n    default:\n      return (\n        <div className=\"cardsWrapper\">\n          <div className=\"cardWrapper\">\n            <div\n              className=\"newCard\"\n              onClick={() => history.push('/newcontent')}\n            >\n              +\n            </div>\n            {contents.tests.map((item, index) => {\n              return (\n                <Card key={`card-${index}`} data={item} onDelete={onDelete} />\n              )\n            })}\n          </div>\n        </div>\n      )\n  }\n}\n\nexport default ContentsList\n","/Users/jeahyenjung/Desktop/toy/gridprac/src/lib/api/api.js",[],"/Users/jeahyenjung/Desktop/toy/gridprac/src/component/card/Card.js",[],"/Users/jeahyenjung/Desktop/toy/gridprac/src/pages/ContentMaker.js",["47"],"import React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Header from '../component/header/Header'\nimport api from '../lib/api/api'\nimport './ContentMaker.scss'\n\nfunction ContentMaker() {\n  const history = useHistory()\n  const [title, setTitle] = useState('')\n  const [link, setLink] = useState('')\n  const [start, setStart] = useState(null)\n\n  const [contents, setContents] = useState({\n    status: 'idle',\n    tests: null,\n  })\n\n  useEffect(() => {\n    ;(async () => {\n      try {\n        const result = await api.getTestsApi()\n\n        setContents({\n          status: 'pending',\n          tests: null,\n        })\n\n        setContents({\n          status: 'resolved',\n          tests: result,\n        })\n      } catch (e) {\n        setContents({\n          status: 'rejected',\n          tests: null,\n        })\n      }\n    })()\n  }, [])\n\n  const onClickFunc = async evt => {\n    const body = {\n      title: title,\n      description: '',\n      contentUrl: link,\n      hashtag: '',\n      start: start,\n      comment: '',\n    }\n    try {\n      await api.createTest(body)\n      setContents({\n        status: 'resolved',\n        contents: [...contents.tests, body],\n      })\n    } catch (e) {}\n    history.push('/contents')\n  }\n\n  const changeHandler = e => {\n    if (e.target.name === 'title') setTitle(e.target.value)\n    else if (e.target.name === 'link') setLink(e.target.value)\n    else if (e.target.name === 'start') setStart(e.target.value)\n  }\n\n  return (\n    <>\n      <div className=\"makerWrapper\">\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"제목을 입력하세요\"\n            name=\"title\"\n            onChange={changeHandler}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"유튜브 링크를입력하세요\"\n            name=\"link\"\n            onChange={changeHandler}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"시작시간을 입력하세요\"\n            name=\"start\"\n            onChange={changeHandler}\n          />\n        </form>\n        <button onClick={onClickFunc}>생성하기</button>\n      </div>\n    </>\n  )\n}\n\nexport default ContentMaker\n",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":27,"nodeType":"54","messageId":"55","endLine":2,"endColumn":33},{"ruleId":"56","severity":1,"message":"57","line":53,"column":15,"nodeType":"58","endLine":61,"endColumn":16},{"ruleId":"52","severity":1,"message":"59","line":39,"column":13,"nodeType":"54","messageId":"55","endLine":39,"endColumn":19},{"ruleId":"52","severity":1,"message":"60","line":3,"column":8,"nodeType":"54","messageId":"55","endLine":3,"endColumn":14},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'result' is assigned a value but never used.","'Header' is defined but never used.","no-global-assign","no-unsafe-negation"]